 << Validation >>
    => 유효성 검증 (form validation)
    => 사용자가 입력한 데이터에 대해서 사전 검증하는 작업
    => 입력값을 받는 컨트롤러 단에서 처리
    => 자주 사용하는 유효성에 대한 검사를 도와주는 프레임워크(hibernate validation) 사용 => 어노테이션을 통해 검증

    - 어노테이션 및 태그
        - 컨트롤러단
            @Valid 클래스
                => + BindingResult result 가 바로 뒤에 와야함
                => get매핑에 @Valid 붙은 클래스를 변수로 선언
                    => th:object="${memberDTO}" 와 연관됨

        - html단
            th:object="${memberDTO}" => memberDTO는 클래스명 MemberDTO 를 의미하나 앞글자만 소문자
                => 해당 태그가 get매핑의 매개변수와 연결되어 있다는 뜻
            th:if="${#fields.hasErrors('컬럼명')}" th:errors="*컬럼명" class="text-danger"

        - DTO단
            @NotBlank(message = "") : 공백 금지
                => @NotEmpty + 빈문자열("") 검사
                => 원하는 메세지 입력가능
                => @Min/@Max 와 함께 쓰일 수 없음
            
            @NotEmpty(message = "") : 공백 허용 (길이가 0인지만 검사) == 비어있지 않기만 하면 됨
                => 공백허용 : 사용자가 공백으로 문자를 채우면 검증 불가
                => 원하는 메세지 입력 가능
            
            @NotNull : Null 인지 아닌지만 검증
            
            @Email(message = "") : email 형식에 맞는지 검증 (이메일을 입력해야 검사해줌)
                => 원하는 메세지 입력가능
            
            @Length(min = 값, max = 값) : 입력문자 최소/최대길이 제한
            
            @Min(value = 값, message = "")
            @Max(value = 값, message = "")
                => 비어진 값에 대해서는 검사 X

            @Pattern : 정규식을 통한 조건